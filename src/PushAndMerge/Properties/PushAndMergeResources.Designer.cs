//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwissAcademic.Addons.PushAndMerge.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class PushAndMergeResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal PushAndMergeResources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SwissAcademic.Addons.PushAndMerge.Properties.PushAndMergeResources", typeof(PushAndMergeResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. All other references ähnelt.
        /// </summary>
        internal static string allOtherTitlesSubtitleLabel {
            get {
                return ResourceManager.GetString("allOtherTitlesSubtitleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Back ähnelt.
        /// </summary>
        internal static string BackButton {
            get {
                return ResourceManager.GetString("BackButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        internal static string CancelButton {
            get {
                return ResourceManager.GetString("CancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Items cannot be copied within the same project. ähnelt.
        /// </summary>
        internal static string CantMoveItemsInTheSameProject {
            get {
                return ResourceManager.GetString("CantMoveItemsInTheSameProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Copy, duplicate if same creator and creation date. ähnelt.
        /// </summary>
        internal static string CloneKnowledgeItemOnMatchText {
            get {
                return ResourceManager.GetString("CloneKnowledgeItemOnMatchText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Copy to target project ähnelt.
        /// </summary>
        internal static string copyOtherTitlesCheckboxText {
            get {
                return ResourceManager.GetString("copyOtherTitlesCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Custom fields ähnelt.
        /// </summary>
        internal static string CustomFields {
            get {
                return ResourceManager.GetString("CustomFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finish ähnelt.
        /// </summary>
        internal static string FinishButton {
            get {
                return ResourceManager.GetString("FinishButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
        ///{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\f0\fs24  \b\fs22\lang7 All other references\b0\par
        ///All other references are the references that meet the following criteria:\par
        ///
        ///\pard{\pntext\f1\&apos;B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\&apos;B7}}\fi-360\li720\sa200\sl276\slmult1 no reference with the same ID in the target project\par
        ///{\pntext\f1\&apos;B7\tab}n [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HelpText_AllOtherTitles {
            get {
                return ResourceManager.GetString("HelpText_AllOtherTitles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
        ///{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\f0\fs24  \fs22\lang7 References with a 100% match in main fields\par
        ///The rule will apply if the contents of the following fields are identical for the reference in the source project and the target project:\par
        ///
        ///\pard{\pntext\f1\&apos;B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\&apos;B7}}\fi-358\li721\sa200\sl240\slmu [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HelpText_MergeTitlesWithEqualEssentialFields {
            get {
                return ResourceManager.GetString("HelpText_MergeTitlesWithEqualEssentialFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\f0\fs24  \fs22\lang7 References with the same StaticID\par
        ///Whenever a reference is copied from a source project to a target project, it will be given a new internal ID.\line\line The original ID from the source project is recorded in the internal \i StaticID\i0  field. This lets Citavi see which references in the source and target projects [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HelpText_MergeTitlesWithEqualStaticId {
            get {
                return ResourceManager.GetString("HelpText_MergeTitlesWithEqualStaticId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\f0\fs24  \fs22\lang7 References with the same ID\par
        ///Only the reference&apos;s IDs will be compared. The rule will apply to a reference with multiple IDs if at least one ID is the same.\par
        ///} ähnelt.
        /// </summary>
        internal static string HelpText_MergeTitlesWithSameId {
            get {
                return ResourceManager.GetString("HelpText_MergeTitlesWithSameId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
        ///{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
        ///\pard\sl276\slmult1\f0\fs24  \fs22\lang7 Data to include along with copied references\par
        ///\par
        ///Your selection includes references to be copied to the target project.\par
        ///\par
        ///The following information will be copied to the target project along with the references:\par
        ///\par
        ///
        ///\pard{\pntext\f1\&apos;B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\p [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HelpText_SelectDataToCopy {
            get {
                return ResourceManager.GetString("HelpText_SelectDataToCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Copy, ignore if same creator and creation date. ähnelt.
        /// </summary>
        internal static string IgnoreKnowledgeItemOnMatchText {
            get {
                return ResourceManager.GetString("IgnoreKnowledgeItemOnMatchText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignore ähnelt.
        /// </summary>
        internal static string ignoreOtherTitlesCheckboxText {
            get {
                return ResourceManager.GetString("ignoreOtherTitlesCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Knowledge items ähnelt.
        /// </summary>
        internal static string KnowledgeItemsLabel {
            get {
                return ResourceManager.GetString("KnowledgeItemsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die References with a 100% match in main fields ähnelt.
        /// </summary>
        internal static string mergeEssentialFieldsCheckboxText {
            get {
                return ResourceManager.GetString("mergeEssentialFieldsCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionComplete {
            get {
                return ResourceManager.GetString("MergeReferenceOptionComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add if empty ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionCompleteIfEmpty {
            get {
                return ResourceManager.GetString("MergeReferenceOptionCompleteIfEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignore ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionIgnore {
            get {
                return ResourceManager.GetString("MergeReferenceOptionIgnore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionOverride {
            get {
                return ResourceManager.GetString("MergeReferenceOptionOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [EN]Nur nicht-identische ergänzen ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionsCompleteIfNotEqual {
            get {
                return ResourceManager.GetString("MergeReferenceOptionsCompleteIfNotEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [EN]Alle ersetzen ähnelt.
        /// </summary>
        internal static string MergeReferenceOptionsReplace {
            get {
                return ResourceManager.GetString("MergeReferenceOptionsReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die References with the same ID (ISBN, DOI, PubMedID, PMC, arXiv) ähnelt.
        /// </summary>
        internal static string mergeSameIdCheckboxText {
            get {
                return ResourceManager.GetString("mergeSameIdCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die References with the same StaticID ähnelt.
        /// </summary>
        internal static string mergeStaticIdCheckboxText {
            get {
                return ResourceManager.GetString("mergeStaticIdCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die References to be merged in the target project:
        ///which data should be merged? ähnelt.
        /// </summary>
        internal static string MergeTitlesTabTitle {
            get {
                return ResourceManager.GetString("MergeTitlesTabTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New project ... ähnelt.
        /// </summary>
        internal static string NewProjectButtonText {
            get {
                return ResourceManager.GetString("NewProjectButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Next ähnelt.
        /// </summary>
        internal static string NextButton {
            get {
                return ResourceManager.GetString("NextButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open project ... ähnelt.
        /// </summary>
        internal static string OpenProjectButtonText {
            get {
                return ResourceManager.GetString("OpenProjectButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Project name ähnelt.
        /// </summary>
        internal static string ProjectNameLabel {
            get {
                return ResourceManager.GetString("ProjectNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Copy knowledge items to a Citavi project ähnelt.
        /// </summary>
        internal static string PushAndMergeCommandButtonText {
            get {
                return ResourceManager.GetString("PushAndMergeCommandButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0:The reference|All {0} references} in this project ähnelt.
        /// </summary>
        internal static string ReferenceSelectionAll_Smart {
            get {
                return ResourceManager.GetString("ReferenceSelectionAll_Smart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The {0:reference|{0} references} in the current selection ähnelt.
        /// </summary>
        internal static string ReferenceSelectionFiltered_Smart {
            get {
                return ResourceManager.GetString("ReferenceSelectionFiltered_Smart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0:The selected reference|The {0} selected references} ähnelt.
        /// </summary>
        internal static string ReferenceSelectionSelected_Smart {
            get {
                return ResourceManager.GetString("ReferenceSelectionSelected_Smart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select target project ähnelt.
        /// </summary>
        internal static string SelectProjectTabTitle {
            get {
                return ResourceManager.GetString("SelectProjectTabTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. References that should be merged in the target project ähnelt.
        /// </summary>
        internal static string TitleSelectionMergeSubtitleLabel {
            get {
                return ResourceManager.GetString("TitleSelectionMergeSubtitleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Settings and restrictions ähnelt.
        /// </summary>
        internal static string TitleSelectionTabSettingsLabel {
            get {
                return ResourceManager.GetString("TitleSelectionTabSettingsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select reference ähnelt.
        /// </summary>
        internal static string TitleSelectionTabTitle {
            get {
                return ResourceManager.GetString("TitleSelectionTabTitle", resourceCulture);
            }
        }
    }
}
