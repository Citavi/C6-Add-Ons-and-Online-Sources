<ComponentPart id="ea237d1c-fe05-480a-afe0-e13ffd4d53dc" version="1.0.0.0">
  <AllFieldElementsRequired>false</AllFieldElementsRequired>
  <FilterCode><![CDATA[// #C6_43114
// v.3.3


using System.Linq;
using System.Collections.Generic;
using SwissAcademic.Citavi;
using SwissAcademic.Citavi.Metadata;
using SwissAcademic.Collections;
using SwissAcademic.Drawing;

namespace SwissAcademic.Citavi.Citations
{
	public class ComponentPartFilter
		:
		IComponentPartFilter
	{
		public IEnumerable<ITextUnit> GetTextUnits(ComponentPart componentPart, Template template, Citation citation, out bool handled)
		{
			//Name of filter: Outputs a dash "---" for each individual name in case of repetition
			//Version 3.3 Get rid of person cloneing plus small improvements
			//Version 3.2 PersonFormatter is part of PersonFieldElement now
			//Version 3.1 Prevent NullReferenceException for citation.CitationManager
			//Version 3.0
			//- allow either one dash if all persons are the same (lookForRepetitionOfIndividualPersons = false) or various dashes for each repeated person (lookForRepetitionOfIndividualPersons = true)
			//- allow mix of dashes and written names and again dashes (exitLookForRepetitionIfFailedOnce = false) or not (exitLookForRepetitionIfFailedOnce = true)
			//Version 2.2 
			//- GetPreviousVisibleCitation() method gets first previous citation where nobib = false
			//Version 2.1
			//- filter deactivates itself, if the bibliography is NOT YET completely sorted (see below)
			//Version 2 
			//- filter deactivates itself, if the person field component it is attached to is NOT the first inside the template
			//- filter works on ALL kinds of person fields (Authors, Editors, Organizations, AuthorsEditorsOrOrganizations etc.)
			//- filter compares ALL kinds of person fields of this citation with the ones of its predecessor (e.g. authors with authors, authors with editors etc.)
			//- filter considers group prefices for singular and plural already defined on the field element itself:
			//	--- (Hrsg.) or ---, eds. etc. I.e. it checks, if ", eds." has already been defined and uses it with the dash.
			//- you can customize the dash in line 34 below

			//NOTE: Set the following to true, if you want one dash if all persons are repeated, or none,
			//set it to false, if you want to compare person by person and set individual dashes per repeated person
			bool lookForRepetitionOfIndividualPersons = true;
			bool exitLookForRepetitionIfFailedOnce = true; //only applicable if previous was set to true

			/*
			 * ORIGINAL (no dash):
			 * 
			 * A, B (2010)
			 * A, B (2010)
			 * A, B, C (2010)
			 * A, B, D (2010)
			 * A, B, C (2010)
			 * A, D, C (2010)
			 * 
			 * lookForRepetitionOfIndividualPersons = FALSE:
			 * 
			 * A, B (2010)
			 * - (2010)
			 * A, B, C (2010)
			 * A, B, D (2010)
			 * A, B, C (2010)
			 * A, D, C (2010)
			 * 
			 * lookForRepetitionOfIndividualPersons = TRUE, exitLookForRepetitionIfFailedOnce = TRUE
			 * 
			 * A, B (2010)
			 * -, - (2010)
			 * A, B, C (2010)
			 * -, -, D (2010)
			 * A, B, C (2010)
			 * -, D, C (2010)
			 * 
			 * lookForRepetitionOfIndividualPersons = TRUE, exitLookForRepetitionIfFailedOnce = FALSE
			 * 
			 * A, B (2010)
			 * -, - (2010)
			 * A, B, C (2010)
			 * -, -, D (2010)
			 * A, B, C (2010)
			 * -, D, - (2010)
			 * 
			 */

			handled = false;

			if (citation == null || citation.CitationManager == null) return null;
			if (template == null) return null;
			if (componentPart == null || componentPart.Elements == null || !componentPart.Elements.Any()) return null;

			
			
			//define the dashes
			string emdashes = "———";
			LiteralTextUnit emDashesTextUnit = new LiteralTextUnit(emdashes);

			//filter deactivates itself, if the bibliography is NOT YET completely sorted
			//this is necessary to avoid that this filter in turn changes the sort order, that it depends upon
			if (citation.CitationManager.BibliographyCitations.IsSorted == false) return null;
		

			//make sure the current componentPart is the FIRST inside the template
			if (template.ComponentParts == null || template.ComponentParts.Count == 0) return null;
			if (template.ComponentParts[0].Id != componentPart.Id) return null;

			#region ThisBibliographyCitation

			var thisBibliographyCitation = citation as BibliographyCitation;
			if (thisBibliographyCitation == null || thisBibliographyCitation.Reference == null) return null;

			#endregion ThisBibliographyCitation

			#region PreviousBibliographyCitation

			var previousBibliographyCitation = thisBibliographyCitation.PreviousPrintingBibliographyCitation;
			if (previousBibliographyCitation == null || previousBibliographyCitation.Reference == null) return null;

			#endregion PreviousBibliographyCitation

			#region ThisTemplate

			var thisTemplate = thisBibliographyCitation.GetTemplateForCitation();
			if (thisTemplate == null) return null;

			#endregion ThisTemplate

			#region PreviousTemplate

			var previousTemplate = previousBibliographyCitation.GetTemplateForCitation();
			if (previousTemplate == null) return null;

			#endregion PreviousTemplate

			#region ThisPersonFieldElement

			PersonFieldElement thisPersonFieldElement = componentPart.Elements.OfType<PersonFieldElement>().FirstOrDefault() as PersonFieldElement;
			if (thisPersonFieldElement == null) return null;

			#endregion ThisPersonFieldElement

			#region PreviousPersonFieldElement

			PersonFieldElement previousPersonFieldElement = previousBibliographyCitation.Template.StructuralPersonFieldElement;
			if (previousPersonFieldElement == null) return null;

			#endregion PreviousPersonFieldElement

			#region ThesePersons

			IEnumerable<Person> thesePersons = thisPersonFieldElement.GetPersons(thisBibliographyCitation);
			if (thesePersons == null || !thesePersons.Any()) return null;

			#endregion ThesePersons

			#region PreviousPersons

			IEnumerable<Person> previousPersons = previousPersonFieldElement.GetPersons(previousBibliographyCitation);
			if (previousPersons == null || !previousPersons.Any()) return null;

			#endregion PreviousPersons
			
		
			/*
			var debugOutput = new TextUnitCollection();
			debugOutput.Add(new LiteralTextUnit("THESE PERSONS: " + thesePersons.ToString()));
			debugOutput.Add(new LiteralTextUnit(" | PREVIOUS PERSONS: " + previousPersons.ToString()));
			handled  = true;
			return debugOutput;
			*/

			#region LookForRepetitionOfIndividualPersons = TRUE

			if (lookForRepetitionOfIndividualPersons)
			{
				List<Person> outputPersons = new List<Person>();
				bool continuedSuccess = true;
				for (int i = 0; i < thesePersons.Count(); i++)
				{
					Person thisIthPerson = thesePersons.ElementAtOrDefault(i);
					if (thisIthPerson == null) break;
					
					/*
					if (!continuedSuccess)
					{
						outputPersons.Add(thisIthPerson);
						continue;
					};
					*/
					

					if (i >= previousPersons.Count())
					{
						continuedSuccess = false;
						outputPersons.Add(thisIthPerson);
					}
					else
					{
						Person previousIthPerson = previousPersons.ElementAtOrDefault(i);
						if (previousIthPerson == null)
						{
							continuedSuccess = false;
							outputPersons.Add(thisIthPerson);
							continue;
						}
						

						if
						(
							(!exitLookForRepetitionIfFailedOnce || (exitLookForRepetitionIfFailedOnce && continuedSuccess)) &&
							thisIthPerson.Id.Equals(previousIthPerson.Id)
						)
						{
							Person emdashPerson = new Person(thisIthPerson.Project, emdashes);
							outputPersons.Add(emdashPerson);
						}
						else
						{
							continuedSuccess = false;
							outputPersons.Add(thisIthPerson);
						}
					}
				}

				var output = thisPersonFieldElement.PersonFormatter.Format(outputPersons, citation);

				handled = true;
				return output;
			}

			#endregion LookForRepetitionOfIndividualPersons = TRUE

			#region LookForRepetitionOfIndividualPersons = FALSE

			else
			{


				if (!thesePersons.SequenceEqual(previousPersons)) return null;

				//check if there are group suffixe defined
				LiteralTextUnit thisGroupSuffixSingularTextUnit = thisPersonFieldElement.GroupSuffixSingular != null ?
						new LiteralTextUnit(thisPersonFieldElement.GroupSuffixSingular) :
						null;
				LiteralTextUnit thisGroupSuffixPluralTextUnit = thisPersonFieldElement.GroupSuffixPlural != null ?
						new LiteralTextUnit(thisPersonFieldElement.GroupSuffixPlural) :
						null;

				//we are dealing the the same author(s), so we handle the output now:
				var output = new TextUnitCollection();
				if (thesePersons.Count() > 1 && thisGroupSuffixPluralTextUnit != null)
				{
					output.Add(emDashesTextUnit);
					output.Add(thisGroupSuffixSingularTextUnit);
				}
				else if (thesePersons.Count() == 1 && thisGroupSuffixSingularTextUnit != null)
				{
					output.Add(emDashesTextUnit);
					output.Add(thisGroupSuffixSingularTextUnit);
				}
				else
				{
					output.Add(emDashesTextUnit);
				}


				handled = true;
				return output;
			}

			#endregion LookForRepetitionOfIndividualPersons = FALSE
			
			return null;
		}
	}
}]]></FilterCode>
  <IsFilterActivated>true</IsFilterActivated>
  <FilterName />
  <FilterNotes />
  <Name>{0}</Name>
  <Notes />
  <PunctuationAfter type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="Define" />
    <Text />
  </PunctuationAfter>
  <PunctuationBefore type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="Define" />
    <Text>. </Text>
  </PunctuationBefore>
  <Scope>Reference</Scope>
  <ShowInList>true</ShowInList>
  <Elements>
    <Element type="PersonFieldElement">
      <ReferencePropertyId>Editors</ReferencePropertyId>
      <Required>false</Required>
      <FirstGroupLength>-1</FirstGroupLength>
      <FirstGroupPersonNameOrder>LastNameFirstName</FirstGroupPersonNameOrder>
      <FirstGroupLastNameFontStyle behavior="Define" />
      <FirstGroupFirstNameFormat>Full</FirstGroupFirstNameFormat>
      <FirstGroupMiddleNameFormat>Full</FirstGroupMiddleNameFormat>
      <FirstGroupMiddleNameUsage>All</FirstGroupMiddleNameUsage>
      <FirstGroupFirstAndMiddleNameFontStyle behavior="Define" />
      <FirstGroupPersonSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>; </Text>
      </FirstGroupPersonSeparator>
      <FirstGroupLastPersonSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>; </Text>
      </FirstGroupLastPersonSeparator>
      <FirstGroupUseNonBreakingSpaceBetweenLastAndFirstName>false</FirstGroupUseNonBreakingSpaceBetweenLastAndFirstName>
      <FirstGroupUseNonBreakingSpaceInAndBetweenFirstAndMiddleNames>false</FirstGroupUseNonBreakingSpaceInAndBetweenFirstAndMiddleNames>
      <FirstGroupUseNonBreakingSpaceBetweenPrefixAndName>false</FirstGroupUseNonBreakingSpaceBetweenPrefixAndName>
      <FirstGroupUseNonBreakingHyphenInFirstAndMiddleNames>false</FirstGroupUseNonBreakingHyphenInFirstAndMiddleNames>
      <FirstGroupLastNameFirstNameSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>, </Text>
      </FirstGroupLastNameFirstNameSeparator>
      <FirstGroupFirstNameLastNameSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text> </Text>
      </FirstGroupFirstNameLastNameSeparator>
      <FirstGroupFirstNamesMiddleNamesSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text> </Text>
      </FirstGroupFirstNamesMiddleNamesSeparator>
      <FirstGroupFirstNamesMiddleNamesAbbreviator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>.</Text>
      </FirstGroupFirstNamesMiddleNamesAbbreviator>
      <UseDifferentFormatForLastPerson>false</UseDifferentFormatForLastPerson>
      <UseDifferentLastPersonSeparatorIfExactlyTwoPersons>false</UseDifferentLastPersonSeparatorIfExactlyTwoPersons>
      <Abbreviate>false</Abbreviate>
      <AbbreviateNamePrefixes>false</AbbreviateNamePrefixes>
      <NamePrefixesFontStyle behavior="Define" />
      <NamePrefixAbbreviations />
      <SuppressNameSuffixes>false</SuppressNameSuffixes>
      <NameSuffixesFontStyle behavior="Define" />
      <NameSuffixesSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>, </Text>
      </NameSuffixesSeparator>
      <OrganizationNameOrder>NameAbbreviation</OrganizationNameOrder>
      <OrganizationTextBeforeName type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text />
      </OrganizationTextBeforeName>
      <OrganizationTextBeforeNameApplyCondition>AttributeHasData</OrganizationTextBeforeNameApplyCondition>
      <OrganizationNameFontStyle behavior="Define" />
      <OrganizationTextAfterName type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text />
      </OrganizationTextAfterName>
      <OrganizationTextAfterNameApplyCondition>AttributeHasData</OrganizationTextAfterNameApplyCondition>
      <OrganizationTextBeforeAbbreviation type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text> (</Text>
      </OrganizationTextBeforeAbbreviation>
      <OrganizationTextBeforeAbbreviationApplyCondition>AttributeHasData</OrganizationTextBeforeAbbreviationApplyCondition>
      <OrganizationAbbreviationFontStyle behavior="Define" />
      <OrganizationTextAfterAbbreviation type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>)</Text>
      </OrganizationTextAfterAbbreviation>
      <OrganizationTextAfterAbbreviationApplyCondition>AttributeHasData</OrganizationTextAfterAbbreviationApplyCondition>
      <SubsequentRepetitionOutputActivated>false</SubsequentRepetitionOutputActivated>
    </Element>
  </Elements>
</ComponentPart>