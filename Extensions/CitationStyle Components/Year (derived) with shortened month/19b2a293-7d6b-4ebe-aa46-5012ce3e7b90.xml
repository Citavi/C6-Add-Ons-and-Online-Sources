<ComponentPart id="19b2a293-7d6b-4ebe-aa46-5012ce3e7b90" version="1.0.0.0">
  <AllFieldElementsRequired>false</AllFieldElementsRequired>
  <FilterCode><![CDATA[//#43143
//Version 2.1
//US date with short month name, e.g. 15 May 2015 or 7 Jan. 2011

using System;
using System.Linq;
using System.Collections.Generic;
using System.Globalization;
using SwissAcademic.Citavi;
using SwissAcademic.Citavi.Metadata;
using SwissAcademic.Collections;
using SwissAcademic.Drawing;

namespace SwissAcademic.Citavi.Citations
{
	public class ComponentPartFilter
		:
		IComponentPartFilter
	{

		public IEnumerable<ITextUnit> GetTextUnits(ComponentPart componentPart, Template template, Citation citation, out bool handled)
		{
			handled = false;

			if (componentPart == null) return null;
			if (componentPart.Elements == null || !componentPart.Elements.Any()) return null;
			if (citation == null || citation.Reference == null) return null;
			
			Reference referenceInScope = null;
			if (componentPart.Scope == ComponentPartScope.Reference)
			{
				referenceInScope = citation.Reference;
			}
			else if (componentPart.Scope == ComponentPartScope.ParentReference)
			{
				referenceInScope = citation.Reference.ParentReference;
			}
			if (referenceInScope == null) return null;
			
			
			IEnumerable<DateTimeFieldElement> dateFieldElements = componentPart.Elements.OfType<DateTimeFieldElement>().ToList();
			if (dateFieldElements == null || !dateFieldElements.Any()) return null;
	

			bool dateFound = false;
			CultureInfo targetCulture = CultureInfo.CreateSpecificCulture("en-US");	
			
			foreach (DateTimeFieldElement dateFieldElement in dateFieldElements)
			{
				string dateString = referenceInScope.GetValue(dateFieldElement.PropertyId) as string;
				if (string.IsNullOrEmpty(dateString)) continue;
				
				DateTime dateValue;
				if (!DateTimeInformation.TryParse(dateString, out dateValue)) continue;

				int day = dateValue.Day;
				int month = dateValue.Month;
				int year = dateValue.Year;

				string monthStringShort = dateValue.ToString("MMM", targetCulture);
				string monthStringLong = dateValue.ToString("MMMM", targetCulture);

				string monthString = monthStringShort == monthStringLong ? monthStringShort : monthStringLong.Length <= 3 ? monthStringLong : monthStringShort + ".";
				//string dayString = day.ToString("D2");				//2-digit day, padded with leading 0 if necessary, so 08 instead of 8
				string dayString = day.ToString();
				string yearString = dateValue.ToString("yyyy");			//4-digit year

				string newDatePattern = "{0} {1} {2}";
				dateString = string.Format(newDatePattern, dayString, monthString, yearString);
				
				LiteralElement outputDateElement = new LiteralElement(componentPart, dateString);
				outputDateElement.FontStyle = dateFieldElement.FontStyle;
				componentPart.Elements.ReplaceItem(dateFieldElement, outputDateElement);
				dateFound = true;
			}
		
			if (dateFound)
			{
				foreach(LiteralElement literalElement in componentPart.Elements.OfType<LiteralElement>())
				{
					literalElement.ApplyCondition = ElementApplyCondition.Always;
				}
			}
			
			handled = false;
			return null;
		}
	}
}]]></FilterCode>
  <IsFilterActivated>true</IsFilterActivated>
  <FilterName>Shorten month</FilterName>
  <FilterNotes />
  <Name>{0}</Name>
  <Notes />
  <PunctuationAfter type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="SameAsPrevious" />
    <Text />
  </PunctuationAfter>
  <PunctuationBefore type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="SameAsPrevious" />
    <Text> </Text>
  </PunctuationBefore>
  <Scope>Reference</Scope>
  <ShowInList>true</ShowInList>
  <Elements>
    <Element type="DateTimeFieldElement">
      <ReferencePropertyId>YearResolved</ReferencePropertyId>
      <Required>false</Required>
      <FontStyle behavior="Define" />
      <Format>yyy</Format>
      <InPrintReplacement type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text>[im Druck]</Text>
      </InPrintReplacement>
      <ReplaceInPrintPlaceholder>true</ReplaceInPrintPlaceholder>
      <UseFormat>true</UseFormat>
    </Element>
  </Elements>
</ComponentPart>