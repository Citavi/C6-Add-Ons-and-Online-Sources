<ComponentPart id="622100be-6c64-4c10-b6f5-57859fdd5cc2" version="1.0.0.0">
  <AllFieldElementsRequired>false</AllFieldElementsRequired>
  <FilterCode><![CDATA[// #C6_43123
// Version 3.4

using System;
using System.Collections.Generic;
using System.Linq;

namespace SwissAcademic.Citavi.Citations
{
    public class ComponentPartFilter
        :
        IComponentPartFilter
    {
        //Version 3.4 Name part order can be changed with setting "nameOrderForDisambiguation"
        //Version 3.3 Copy font style form first group last name to organization name to ensure also "expanded" last names are formatted correctly
        //Version 3.2 In case of NameIdentity.LastName wie use the new output PersonFieldElementFirstNameInitialMiddleNameInitial
        //Version 3.1 Script is deactivated when used on a placeholder citation with /yearonly option ONLY if there is a year field present in the template
        //Version 3.0 Script can deal with different forms of name identity: LastName, LastNameFirstNameInitial, LastNameFirstNameFull etc.
        //Version 2.2 Script allows for combination with idem/eadem output if the same person or group of persons is repeated
        //Version 2.1 Script is deactivated when used on a placeholder citation with /yearonly option
        //Show first name if last names are identical for different persons
        public IEnumerable<ITextUnit> GetTextUnits(ComponentPart componentPart, Template template, Citation citation, out bool handled)
        {

            //Change order of last and first names here; use only FirstNameLastName or LastNameFirstName (others will be ignored)
            PersonNameOrder nameOrderForDisambiguation = PersonNameOrder.FirstNameLastName;

            bool useNonBreakingSpace = false;
            bool useNonBreakingHyphen = false;

            handled = false;

            if (template == null) return null;
            if (citation == null) return null;
            if (citation.CitationManager == null) return null;

            PlaceholderCitation placeholderCitation = citation as PlaceholderCitation;
            if (placeholderCitation != null && placeholderCitation.YearOnly && template.StructuralDateTimeFieldElement != null) return null;

            var reference = citation.Reference;
            if (reference == null) return null;

            if (componentPart == null) return null;
            if (componentPart.Elements == null || !componentPart.Elements.Any()) return null;

            PersonFieldElement personFieldElement = componentPart.Elements.OfType<PersonFieldElement>().FirstOrDefault();
            if (personFieldElement == null) return null;

            bool duplicateLastNameFound = false;
            List<Person> personsForOutput = GetClonedPersonsForOutput(personFieldElement, citation, nameOrderForDisambiguation, out duplicateLastNameFound);
            if (!duplicateLastNameFound) return null;
            if (personsForOutput == null || !personsForOutput.Any()) return null;

            bool usePlural = personsForOutput.Count > 1;
            TextUnitCollection personTextUnits = null;

            //cloned persons are recognized as organizations because we add the first name to the last name
            personFieldElement.OrganizationNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;

            personTextUnits = PersonFormatter.Format(personsForOutput, citation, personFieldElement);

            TextUnitCollection output = new TextUnitCollection();
            if (personTextUnits != null && personTextUnits.Any())
            {
                personTextUnits.ForEach(u =>
                {
                    if (u.Text.Length > 3)
                    {
                        if (useNonBreakingSpace) u.Text = u.Text.Replace(StringUtility.Space, StringUtility.NonBreakingSpace);
                        if (useNonBreakingHyphen) u.Text = u.Text.Replace(StringUtility.Hyphen, StringUtility.NonBreakingHyphen);
                    }
                });

                output.AddRange(personTextUnits);
                componentPart.Elements.ReplaceItem(personFieldElement, TextUnitCollectionUtility.TextUnitsToLiteralElements(output, componentPart));
            }

            return null;
        }

        #region GetClonedPersonsForOutput

        List<Person> GetClonedPersonsForOutput(PersonFieldElement personFieldElement, Citation citation, PersonNameOrder nameOrderForDisambiguation, out bool duplicateLastNameFound)
        {
            duplicateLastNameFound = false;

            if (personFieldElement == null) return null;
            if (citation == null) return null;
            if (citation.Reference == null) return null;

            List<Person> originalPersons = personFieldElement.GetPersons(citation).ToList(); //takes scope of ComponentPart into account
            if (originalPersons == null || !originalPersons.Any()) return null;

            PersonNameOrder targetNameOrder = PersonNameOrder.LastNameFirstName;
            if (nameOrderForDisambiguation == PersonNameOrder.FirstNameLastName) targetNameOrder = PersonNameOrder.FirstNameLastName;

            #region PersonFieldElementFirstNameInitial

            PersonFieldElement personFieldElementFirstNameInitial = new PersonFieldElement(personFieldElement.ComponentPart, personFieldElement.PropertyId);
            personFieldElementFirstNameInitial.FirstGroupFirstNameFormat = NameFormat.Abbreviated;
            personFieldElementFirstNameInitial.FirstGroupPersonNameOrder = targetNameOrder;
            personFieldElementFirstNameInitial.FirstGroupLastNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;
            personFieldElementFirstNameInitial.FirstGroupMiddleNameUsage = MiddleNameUsage.None;

            #endregion

            #region PersonFieldElementFirstNameFull

            PersonFieldElement personFieldElementFirstNameFull = new PersonFieldElement(personFieldElement.ComponentPart, personFieldElement.PropertyId);
            personFieldElementFirstNameFull.FirstGroupFirstNameFormat = NameFormat.Full;
            personFieldElementFirstNameFull.FirstGroupPersonNameOrder = targetNameOrder;
            personFieldElementFirstNameFull.FirstGroupLastNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;
            personFieldElementFirstNameFull.FirstGroupMiddleNameUsage = MiddleNameUsage.None;

            #endregion

            #region PersonFieldElementFirstNameInitialMiddleNameInitial

            PersonFieldElement personFieldElementFirstNameInitialMiddleNameInitial = new PersonFieldElement(personFieldElement.ComponentPart, personFieldElement.PropertyId);
            personFieldElementFirstNameInitialMiddleNameInitial.FirstGroupFirstNameFormat = NameFormat.Abbreviated;
            personFieldElementFirstNameInitialMiddleNameInitial.FirstGroupPersonNameOrder = targetNameOrder;
            personFieldElementFirstNameInitialMiddleNameInitial.FirstGroupMiddleNameFormat = NameFormat.Abbreviated;
            personFieldElementFirstNameInitialMiddleNameInitial.FirstGroupMiddleNameUsage = MiddleNameUsage.All;
            personFieldElementFirstNameInitialMiddleNameInitial.FirstGroupLastNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;

            #endregion

            #region PersonFieldElementFirstNameFullMiddleNameInitial

            PersonFieldElement personFieldElementFirstNameFullMiddleNameInitial = new PersonFieldElement(personFieldElement.ComponentPart, personFieldElement.PropertyId);
            personFieldElementFirstNameFullMiddleNameInitial.FirstGroupFirstNameFormat = NameFormat.Full;
            personFieldElementFirstNameFullMiddleNameInitial.FirstGroupPersonNameOrder = targetNameOrder;
            personFieldElementFirstNameFullMiddleNameInitial.FirstGroupMiddleNameFormat = NameFormat.Abbreviated;
            personFieldElementFirstNameFullMiddleNameInitial.FirstGroupMiddleNameUsage = MiddleNameUsage.All;
            personFieldElementFirstNameFullMiddleNameInitial.FirstGroupLastNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;

            #endregion

            #region PersonFieldElementFirstNameFullMiddleNameFull

            PersonFieldElement personFieldElementFirstNameFullMiddleNameFull = new PersonFieldElement(personFieldElement.ComponentPart, personFieldElement.PropertyId);
            personFieldElementFirstNameFullMiddleNameFull.FirstGroupFirstNameFormat = NameFormat.Full;
            personFieldElementFirstNameFullMiddleNameFull.FirstGroupPersonNameOrder = targetNameOrder;
            personFieldElementFirstNameFullMiddleNameFull.FirstGroupMiddleNameFormat = NameFormat.Full;
            personFieldElementFirstNameFullMiddleNameFull.FirstGroupMiddleNameUsage = MiddleNameUsage.All;
            personFieldElementFirstNameFullMiddleNameFull.FirstGroupLastNameFontStyle = personFieldElement.FirstGroupLastNameFontStyle;

            #endregion


            List<Person> clonedPersons = new List<Person>();

            foreach (Person person in originalPersons)
            {
                switch (CheckNameIdentity(person, citation))
                {
                    #region NameIdentity.LastNameFirstNameFullMiddleNameInitial

                    case NameIdentity.LastNameFirstNameFullMiddleNameInitial:
                        {
                            duplicateLastNameFound = true;
                            Person clonedPerson = new Person(person.Project);

                            string newDisplayName = PersonFormatter.FormatSinglePerson(person, personFieldElementFirstNameFullMiddleNameFull, PersonFieldGroup.First).ToString();

                            clonedPerson.LastName = newDisplayName;
                            clonedPerson.FirstName = null;
                            clonedPerson.MiddleName = null;
                            clonedPerson.Abbreviation = null;
                            clonedPerson.Prefix = null;
                            clonedPerson.Suffix = null;
                            clonedPerson.Sex = person.Sex;

                            clonedPersons.Add(clonedPerson);
                        }
                        break;

                    #endregion

                    #region NameIdentity.LastNameFirstNameFull

                    case NameIdentity.LastNameFirstNameFull:
                        {
                            duplicateLastNameFound = true;
                            Person clonedPerson = new Person(person.Project);

                            string newDisplayName = PersonFormatter.FormatSinglePerson(person, personFieldElementFirstNameFullMiddleNameInitial, PersonFieldGroup.First).ToString();

                            clonedPerson.LastName = newDisplayName;
                            clonedPerson.FirstName = null;
                            clonedPerson.MiddleName = null;
                            clonedPerson.Abbreviation = null;
                            clonedPerson.Prefix = null;
                            clonedPerson.Suffix = null;
                            clonedPerson.Sex = person.Sex;

                            clonedPersons.Add(clonedPerson);
                        }
                        break;

                    #endregion

                    #region NameIdentity.LastNameFirstNameInitial

                    case NameIdentity.LastNameFirstNameInitial:
                        {
                            duplicateLastNameFound = true;
                            Person clonedPerson = new Person(person.Project);

                            string newDisplayName = PersonFormatter.FormatSinglePerson(person, personFieldElementFirstNameFullMiddleNameInitial, PersonFieldGroup.First).ToString();

                            clonedPerson.LastName = newDisplayName;
                            clonedPerson.FirstName = null;
                            clonedPerson.MiddleName = null;
                            clonedPerson.Abbreviation = null;
                            clonedPerson.Prefix = null;
                            clonedPerson.Suffix = null;
                            clonedPerson.Sex = person.Sex;

                            clonedPersons.Add(clonedPerson);
                        }
                        break;

                    #endregion

                    #region NameIdentity.LastName

                    case NameIdentity.LastName:
                        {
                            duplicateLastNameFound = true;
                            Person clonedPerson = new Person(person.Project);

                            string newDisplayName = PersonFormatter.FormatSinglePerson(person, personFieldElementFirstNameInitialMiddleNameInitial, PersonFieldGroup.First).ToString();

                            clonedPerson.LastName = newDisplayName;
                            clonedPerson.FirstName = null;
                            clonedPerson.MiddleName = null;
                            clonedPerson.Abbreviation = null;
                            clonedPerson.Prefix = null;
                            clonedPerson.Suffix = null;
                            clonedPerson.Sex = person.Sex;

                            clonedPersons.Add(clonedPerson);
                        }
                        break;

                    #endregion

                    #region Default

                    default:
                    case NameIdentity.None:
                    case NameIdentity.LastNameFirstNameFullMiddleNameFull: //we return to just last name, because there is nothing we can do here
                        {
                            Person clonedPerson = new Person(person.Project, person.LastName, person.FirstName, person.MiddleName, person.Abbreviation, person.Prefix, person.Suffix, person.Sex);
                            clonedPersons.Add(clonedPerson);
                        }
                        break;

                        #endregion
                }
            }
            return clonedPersons;
        }

        #endregion GetClonedPersonsForOutput

        #region CheckNameIdentity

        enum NameIdentity
        {
            None,
            LastName,
            LastNameFirstNameInitial,
            LastNameFirstNameFull,
            LastNameFirstNameFullMiddleNameInitial,
            LastNameFirstNameFullMiddleNameFull
        }

        NameIdentity CheckNameIdentity(Person currentPerson, Citation currentCitation)
        {
            if (currentCitation == null) return NameIdentity.None;
            if (currentCitation.CitationManager == null) return NameIdentity.None;

            var placeholderCitations = currentCitation.CitationManager.PlaceholderCitations;
            if (placeholderCitations == null || !placeholderCitations.Any()) return NameIdentity.None;


            List<Person> citedPersons = (
                from citation in placeholderCitations
                where citation.Template != null
                from personField in citation.Template.PersonFieldElements
                from person in personField.GetPersonsCited(citation)
                select person
            ).Distinct().ToList();


            List<Person> personsWithIdenticalLastName = citedPersons.Where(p => string.Equals(p.LastName, currentPerson.LastName, StringComparison.OrdinalIgnoreCase) && p != currentPerson).ToList();
            List<Person> personsWithIdenticalLastNameFirstNameInitial = new List<Person>();
            List<Person> personsWithIdenticalLastNameFirstNameFull = new List<Person>();
            List<Person> personsWithIdenticalLastNameFirstNameFullMiddleNameInitial = new List<Person>();
            List<Person> personsWithIdenticalLastNameFirstNameFullMiddleNameFull = new List<Person>();


            if (!string.IsNullOrEmpty(currentPerson.FirstName))
            {
                personsWithIdenticalLastNameFirstNameInitial = (
                    from person in personsWithIdenticalLastName
                    where !string.IsNullOrEmpty(person.FirstName) && person.FirstName[0] == currentPerson.FirstName[0]
                    select person
                ).ToList();

                personsWithIdenticalLastNameFirstNameFull = (
                    from person in personsWithIdenticalLastNameFirstNameInitial
                    where string.Equals(person.FirstName, currentPerson.FirstName, StringComparison.OrdinalIgnoreCase)
                    select person
                ).ToList();
            }

            if (!string.IsNullOrEmpty(currentPerson.MiddleName))
            {
                personsWithIdenticalLastNameFirstNameFullMiddleNameInitial = (
                    from person in personsWithIdenticalLastNameFirstNameFull
                    where !string.IsNullOrEmpty(person.MiddleName) && person.MiddleName[0] == currentPerson.MiddleName[0]
                    select person
                ).ToList();

                personsWithIdenticalLastNameFirstNameFullMiddleNameFull = (
                    from person in personsWithIdenticalLastNameFirstNameFullMiddleNameInitial
                    where string.Equals(person.MiddleName, currentPerson.MiddleName, StringComparison.OrdinalIgnoreCase)
                    select person
                ).ToList();
            }

            if (personsWithIdenticalLastNameFirstNameFullMiddleNameFull.Any()) return NameIdentity.LastNameFirstNameFullMiddleNameFull;
            if (personsWithIdenticalLastNameFirstNameFullMiddleNameInitial.Any()) return NameIdentity.LastNameFirstNameFullMiddleNameInitial;

            if (personsWithIdenticalLastNameFirstNameFull.Any()) return NameIdentity.LastNameFirstNameFull;
            if (personsWithIdenticalLastNameFirstNameInitial.Any()) return NameIdentity.LastNameFirstNameInitial;

            if (personsWithIdenticalLastName.Any()) return NameIdentity.LastName;

            return NameIdentity.None; //?
        }

        #endregion OtherPersonWithSameLastNameAlsoCited
    }
}]]></FilterCode>
  <IsFilterActivated>true</IsFilterActivated>
  <FilterName>Show first name if last names are identical for different persons</FilterName>
  <FilterNotes />
  <Name>{0} [last name]</Name>
  <Notes />
  <PunctuationAfter type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="SameAsPrevious" />
    <Text />
  </PunctuationAfter>
  <PunctuationBefore type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="Define" />
    <Text>. </Text>
  </PunctuationBefore>
  <Scope>Reference</Scope>
  <ShowInList>true</ShowInList>
  <Elements>
    <Element type="PersonFieldElement">
      <ReferencePropertyId>AuthorsOrEditorsOrOrganizations</ReferencePropertyId>
      <Required>false</Required>
      <FirstGroupLength>-1</FirstGroupLength>
      <FirstGroupPersonNameOrder>LastNameOnly</FirstGroupPersonNameOrder>
      <FirstGroupLastNameFontStyle behavior="Define">
        <AllCaps>false</AllCaps>
        <Bold>false</Bold>
        <DoubleUnderline>false</DoubleUnderline>
        <Italic>true</Italic>
        <SmallCaps>false</SmallCaps>
        <StrikeThrough>false</StrikeThrough>
        <Subscript>false</Subscript>
        <Superscript>false</Superscript>
        <Underline>false</Underline>
      </FirstGroupLastNameFontStyle>
      <FirstGroupFirstNameFormat>Full</FirstGroupFirstNameFormat>
      <FirstGroupMiddleNameFormat>Full</FirstGroupMiddleNameFormat>
      <FirstGroupMiddleNameUsage>All</FirstGroupMiddleNameUsage>
      <FirstGroupFirstAndMiddleNameFontStyle behavior="Define">
        <AllCaps>false</AllCaps>
        <Bold>false</Bold>
        <DoubleUnderline>false</DoubleUnderline>
        <Italic>true</Italic>
        <SmallCaps>false</SmallCaps>
        <StrikeThrough>false</StrikeThrough>
        <Subscript>false</Subscript>
        <Superscript>false</Superscript>
        <Underline>false</Underline>
      </FirstGroupFirstAndMiddleNameFontStyle>
      <FirstGroupPersonSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text>/</Text>
      </FirstGroupPersonSeparator>
      <FirstGroupLastPersonSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text>/</Text>
      </FirstGroupLastPersonSeparator>
      <FirstGroupUseNonBreakingSpaceBetweenLastAndFirstName>false</FirstGroupUseNonBreakingSpaceBetweenLastAndFirstName>
      <FirstGroupUseNonBreakingSpaceInAndBetweenFirstAndMiddleNames>false</FirstGroupUseNonBreakingSpaceInAndBetweenFirstAndMiddleNames>
      <FirstGroupUseNonBreakingSpaceBetweenPrefixAndName>false</FirstGroupUseNonBreakingSpaceBetweenPrefixAndName>
      <FirstGroupUseNonBreakingHyphenInFirstAndMiddleNames>false</FirstGroupUseNonBreakingHyphenInFirstAndMiddleNames>
      <FirstGroupLastNameFirstNameSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>, </Text>
      </FirstGroupLastNameFirstNameSeparator>
      <FirstGroupFirstNameLastNameSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text> </Text>
      </FirstGroupFirstNameLastNameSeparator>
      <FirstGroupFirstNamesMiddleNamesSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text> </Text>
      </FirstGroupFirstNamesMiddleNamesSeparator>
      <FirstGroupFirstNamesMiddleNamesAbbreviator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define" />
        <Text>.</Text>
      </FirstGroupFirstNamesMiddleNamesAbbreviator>
      <UseDifferentFormatForLastPerson>false</UseDifferentFormatForLastPerson>
      <UseDifferentLastPersonSeparatorIfExactlyTwoPersons>false</UseDifferentLastPersonSeparatorIfExactlyTwoPersons>
      <Abbreviate>true</Abbreviate>
      <AbbreviateIfMoreThanPersons>2</AbbreviateIfMoreThanPersons>
      <AbbreviateUpToPerson>1</AbbreviateUpToPerson>
      <Abbreviation type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text> ea</Text>
      </Abbreviation>
      <AddLastPersonIfAbbreviated>false</AddLastPersonIfAbbreviated>
      <IgnoreLastPersonSeparatorIfAbbreviated>false</IgnoreLastPersonSeparatorIfAbbreviated>
      <AbbreviateNamePrefixes>false</AbbreviateNamePrefixes>
      <NamePrefixesFontStyle behavior="Define" />
      <NamePrefixAbbreviations />
      <SuppressNameSuffixes>false</SuppressNameSuffixes>
      <NameSuffixesFontStyle behavior="SameAsPrevious" />
      <NameSuffixesSeparator type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text>, </Text>
      </NameSuffixesSeparator>
      <OrganizationNameOrder>NameOnly</OrganizationNameOrder>
      <OrganizationTextBeforeName type="LiteralElement">
        <ApplyCondition>NextElementHasData</ApplyCondition>
        <FontStyle behavior="SameAsNext" />
        <Text />
      </OrganizationTextBeforeName>
      <OrganizationTextBeforeNameApplyCondition>AttributeHasData</OrganizationTextBeforeNameApplyCondition>
      <OrganizationNameFontStyle behavior="Define">
        <AllCaps>false</AllCaps>
        <Bold>false</Bold>
        <DoubleUnderline>false</DoubleUnderline>
        <Italic>true</Italic>
        <SmallCaps>false</SmallCaps>
        <StrikeThrough>false</StrikeThrough>
        <Subscript>false</Subscript>
        <Superscript>false</Superscript>
        <Underline>false</Underline>
      </OrganizationNameFontStyle>
      <OrganizationTextAfterName type="LiteralElement">
        <ApplyCondition>PreviousElementHasData</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </OrganizationTextAfterName>
      <OrganizationTextAfterNameApplyCondition>AttributeHasData</OrganizationTextAfterNameApplyCondition>
      <OrganizationTextBeforeAbbreviation type="LiteralElement">
        <ApplyCondition>NextElementHasData</ApplyCondition>
        <FontStyle behavior="SameAsNext" />
        <Text> (</Text>
      </OrganizationTextBeforeAbbreviation>
      <OrganizationTextBeforeAbbreviationApplyCondition>AttributeHasData</OrganizationTextBeforeAbbreviationApplyCondition>
      <OrganizationAbbreviationFontStyle behavior="Define" />
      <OrganizationTextAfterAbbreviation type="LiteralElement">
        <ApplyCondition>PreviousElementHasData</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text>)</Text>
      </OrganizationTextAfterAbbreviation>
      <OrganizationTextAfterAbbreviationApplyCondition>AttributeHasData</OrganizationTextAfterAbbreviationApplyCondition>
      <SubsequentRepetitionOutputActivated>true</SubsequentRepetitionOutputActivated>
      <SubsequentRepetitionOutputForSingleMale type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>ders</Text>
      </SubsequentRepetitionOutputForSingleMale>
      <SubsequentRepetitionOutputForSingleFemale type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForSingleFemale>
      <SubsequentRepetitionOutputForSingleNeuter type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForSingleNeuter>
      <SubsequentRepetitionOutputForTeamOfMalesOnly type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfMalesOnly>
      <SubsequentRepetitionOutputForTeamOfFemalesOnly type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfFemalesOnly>
      <SubsequentRepetitionOutputForTeamOfNeutersOnly type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfNeutersOnly>
      <SubsequentRepetitionOutputForTeamOfMalesAndFemales type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfMalesAndFemales>
      <SubsequentRepetitionOutputForTeamOfFemalesAndNeuters type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfFemalesAndNeuters>
      <SubsequentRepetitionOutputForTeamOfMalesAndNeuters type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfMalesAndNeuters>
      <SubsequentRepetitionOutputForTeamOfMalesFemalesAndNeuters type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>true</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>false</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>dies</Text>
      </SubsequentRepetitionOutputForTeamOfMalesFemalesAndNeuters>
      <SubsequentRepetitionOutputSuppressedInsideMultipleCitation>false</SubsequentRepetitionOutputSuppressedInsideMultipleCitation>
      <SubsequentRepetitionOutputSuppressedForFirstCitationInsideMultipleCitation>false</SubsequentRepetitionOutputSuppressedForFirstCitationInsideMultipleCitation>
      <SubsequentRepetitionOutputSuppressedForFirstCitationAfterMultipleCitation>false</SubsequentRepetitionOutputSuppressedForFirstCitationAfterMultipleCitation>
      <SubsequentRepetitionOutputSuppressedInIbidemIdemSequence>false</SubsequentRepetitionOutputSuppressedInIbidemIdemSequence>
      <SubsequentRepetitionOutputSuppressedAcrossFootnotes>true</SubsequentRepetitionOutputSuppressedAcrossFootnotes>
      <SubsequentRepetitionOutputSuppressedAcrossFootnotesIfSeparatedByMoreThanOneIndexNo>true</SubsequentRepetitionOutputSuppressedAcrossFootnotesIfSeparatedByMoreThanOneIndexNo>
      <SubsequentRepetitionOutputSuppressedAcrossFootnotesIfPreviousCitationNotSolitair>true</SubsequentRepetitionOutputSuppressedAcrossFootnotesIfPreviousCitationNotSolitair>
      <SubsequentRepetitionOutputSuppressedWithFormatOptions>None</SubsequentRepetitionOutputSuppressedWithFormatOptions>
      <SubsequentRepetitionOutputSuppressGroupPrefix>false</SubsequentRepetitionOutputSuppressGroupPrefix>
      <SubsequentRepetitionOutputSuppressGroupSuffix>false</SubsequentRepetitionOutputSuppressGroupSuffix>
      <SubsequentRepetitionInBibliographyPersonsOmissionHandling>None</SubsequentRepetitionInBibliographyPersonsOmissionHandling>
    </Element>
  </Elements>
</ComponentPart>