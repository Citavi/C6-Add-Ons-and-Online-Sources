<ComponentPart id="6079dbbf-a307-4a43-8ac4-3d8239e4855d" version="1.0.0.0">
  <AllFieldElementsRequired>false</AllFieldElementsRequired>
  <FilterCode><![CDATA[using System;
using System.Linq;
using System.Collections.Generic;
using SwissAcademic.Citavi;
using SwissAcademic.Citavi.Metadata;
using SwissAcademic.Collections;
using SwissAcademic.Drawing;

namespace SwissAcademic.Citavi.Citations
{
	public class ComponentPartFilter
		:
		IComponentPartFilter
	{
		public IEnumerable<ITextUnit> GetTextUnits(ComponentPart componentPart, Template template, Citation citation, out bool handled)
		{
			//Version 2.0 "Abbreviation 2" added as a possible source
			//Name of filter: Changes Output Style of Journal Abbreviation (using "Abbreviation 1" and "Abbreviation 2" as source)
			//Notes: [1] Period/space (Intl. J. History) DEFAULT - [2] Space only (Intl J History) - [3] Period only (Intl.J.Histry) - [4] No period, no space (IntlJHistory)
			
			PeriodicalAbbreviationOutputStyle outputStyle = PeriodicalAbbreviationOutputStyle.PeriodSpace;		//Change this to .PeriodOnly, .SpaceOnly or .NoPeriodNoSpace if required
			
			handled = false;
		
			if (citation == null) return null;
			if (citation.Reference == null) return null;
			if (!citation.Reference.HasCoreField(ReferenceTypeCoreFieldId.Periodical)) return null;
			if (citation.Reference.Periodical == null) return null;
			
			if (componentPart == null) return null;
			if (componentPart.Elements == null || componentPart.Elements.Count == 0) return null;
			
			var firstPeriodicalFieldElement =  componentPart.Elements.FirstOrDefault<IElement>(element => element is PeriodicalFieldElement) as PeriodicalFieldElement;
			if (firstPeriodicalFieldElement == null) return null;
			
			//make sure the user wants the standard abbreviation, because this filter macro manipulates exactly that abbreviation
			if (firstPeriodicalFieldElement.PeriodicalNameUsage != PeriodicalNameUsage.StandardAbbreviation) return null;
			if (string.IsNullOrEmpty(citation.Reference.Periodical.StandardAbbreviation) && string.IsNullOrEmpty(citation.Reference.Periodical.UserAbbreviation1)) 
				return null;
			

			string abbreviation = String.Empty;
			string journalTitle = String.Empty;

			if (!String.IsNullOrEmpty(citation.Reference.Periodical.Name))
				journalTitle = citation.Reference.Periodical.Name;
		  

			if (!String.IsNullOrEmpty(citation.Reference.Periodical.StandardAbbreviation))
				abbreviation = citation.Reference.Periodical.StandardAbbreviation;
			else
				abbreviation = citation.Reference.Periodical.UserAbbreviation1;
					 
			
			string[] journalTitleWords = journalTitle.ToLowerInvariant().Split(new char[]{' ', '.', ';', ',', ':', '&', '-'}, StringSplitOptions.RemoveEmptyEntries);
			string[] abbreviationWords = abbreviation.Split(new string[] { " ", "  ", "   " }, StringSplitOptions.RemoveEmptyEntries);
			//string[] abbreviationWords = abbreviation.Split(' ');
			

			if (!abbreviation.Contains(".") && !String.IsNullOrEmpty(abbreviation) && String.IsNullOrEmpty(citation.Reference.Periodical.StandardAbbreviation))
			{
				List<string> abbreviationWithFullStops = new List<string>();
				  
				foreach (string word in abbreviationWords)
				{
						
					if (word.StartsWith("(") || word.EndsWith(")"))
					{
						abbreviationWithFullStops.Add(word);
					}
					else if (!Array.Exists(journalTitleWords, x => x == word.ToLowerInvariant()))
					{
						abbreviationWithFullStops.Add(word + ".");
					}
					else
					{
						abbreviationWithFullStops.Add(word);
					}
				}	  
				abbreviationWords = abbreviationWithFullStops.ToArray();
			}				


			string[] wordsWithoutPeriod = new String[abbreviationWords.Length];
			abbreviationWords.CopyTo(wordsWithoutPeriod, 0);
			for (int i = 0; i < wordsWithoutPeriod.Length; i++)
			{
				wordsWithoutPeriod[i] = wordsWithoutPeriod[i].TrimEnd('.');
			}
			
			
			var outputTextElement = new LiteralElement(componentPart, abbreviation);
			outputTextElement.FontStyle = firstPeriodicalFieldElement.FontStyle;
			
			
			switch (outputStyle)
			{
				case PeriodicalAbbreviationOutputStyle.PeriodOnly:
					outputTextElement.Text = string.Join("", abbreviationWords);
					break;

				case PeriodicalAbbreviationOutputStyle.PeriodSpace:
					 outputTextElement.Text = string.Join(" ", abbreviationWords);
					 break;
					
				case PeriodicalAbbreviationOutputStyle.SpaceOnly:
					outputTextElement.Text = string.Join(" ", wordsWithoutPeriod);
					break;
					
				case PeriodicalAbbreviationOutputStyle.NoPeriodNoSpace:
					outputTextElement.Text = string.Join("", wordsWithoutPeriod);
					break;			 

			}

			
			componentPart.Elements.ReplaceItem(firstPeriodicalFieldElement, outputTextElement);
			return null;
		}
		
		private enum PeriodicalAbbreviationOutputStyle
		{
			PeriodSpace,
			SpaceOnly,
			PeriodOnly,
			NoPeriodNoSpace
		}
	}
}]]></FilterCode>
  <IsFilterActivated>true</IsFilterActivated>
  <FilterName>Changes Output Style of Journal Abbreviation</FilterName>
  <FilterNotes />
  <Name>{0}</Name>
  <Notes />
  <PunctuationAfter type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="Define" />
    <Text />
  </PunctuationAfter>
  <PunctuationBefore type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="Define" />
    <Text>. </Text>
  </PunctuationBefore>
  <Scope>Reference</Scope>
  <ShowInList>true</ShowInList>
  <Elements>
    <Element type="PeriodicalFieldElement">
      <ReferencePropertyId>Periodical</ReferencePropertyId>
      <Required>false</Required>
      <Fallback>true</Fallback>
      <FontStyle behavior="Define" />
      <PeriodicalNameUsage>Name</PeriodicalNameUsage>
    </Element>
  </Elements>
</ComponentPart>