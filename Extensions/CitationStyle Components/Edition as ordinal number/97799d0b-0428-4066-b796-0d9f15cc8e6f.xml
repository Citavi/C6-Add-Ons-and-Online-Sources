<ComponentPart id="97799d0b-0428-4066-b796-0d9f15cc8e6f" version="1.0.0.0">
  <AllFieldElementsRequired>false</AllFieldElementsRequired>
  <FilterCode><![CDATA[// #C5_43132
// Version: 1.1

using System;
using System.Linq;
using System.Collections.Generic;
using SwissAcademic.Citavi;
using SwissAcademic.Citavi.Metadata;
using SwissAcademic.Collections;
using SwissAcademic.Drawing;

namespace SwissAcademic.Citavi.Citations
{
	public class ComponentPartFilter
		:
		IComponentPartFilter
	{
		public IEnumerable<ITextUnit> GetTextUnits(ComponentPart componentPart, Template template, Citation citation, out bool handled)
		{
			var alsoReplaceIfFieldContentsIsOnlyANumber = true;		//if false: if field contains just "18" the usual output is "18th ed." (with th and ed. being added automatically)
																	//if true: if field contains just "18", the output will be "eighteenth ed." (with only "ed." - the suffix - being added)
			var autoCapitalizeFirstLetter = true;
			
			//Replace cardinal number (figure) in edition field by ordinal number (word)
			//e.g. : 2 revised edition => second revised edition
			
			handled = false;
		
			
			if (citation == null) return null;
			if (componentPart == null || componentPart.Elements == null || componentPart.Elements.Count == null) return null;
			
			string editionText = string.Empty;
			if (componentPart.Scope == ComponentPartScope.ParentReference)
			{
				if (citation.Reference == null) return null;
				if (citation.Reference.ParentReference == null) return null;
				editionText = citation.Reference.ParentReference.Edition;
			}
			else
			{
				if (citation.Reference == null) return null;
				editionText = citation.Reference.Edition;
			}	
			if (string.IsNullOrEmpty(editionText)) return null;
			

			int editionNumber;
			bool fieldContainsOnlyNumber = int.TryParse(editionText, out editionNumber); 			//field contains a number only!			
			if (fieldContainsOnlyNumber && !alsoReplaceIfFieldContentsIsOnlyANumber) return null;
			

			
			//VERY importent: .ToList() at the end
			var editionFieldElements = componentPart.Elements.OfType<NumericFieldElement>().Where(element => 
				element.PropertyId == ReferencePropertyId.Edition ||
				element.PropertyId == ReferencePropertyId.EditionNumberResolved
			).ToList();
			if (editionFieldElements == null || editionFieldElements.Count() == 0) return null;
			
			#region ReplaceTuples
			
			TupleList<string, string> replaceTuples = new TupleList<string, string>() {
				{"1", "first"},
				{"2", "second"},
				{"3", "third"},
				{"4", "fourth"},
				{"5", "fifth"},
				{"6", "sixth"},
				{"7", "seventh"},
				{"8", "eighth"},
				{"9", "ninth"},
				{"10", "tenth"},
				{"11", "eleventh"},
				{"12", "twelfth"},
				{"13", "thirteenth"},
				{"14", "fourteenth"},
				{"15", "fifteenth"},
				{"16", "sixteenth"},
				{"17", "seventeenth"},
				{"18", "eighteenth"},
				{"19", "nineteenth"},
				{"20", "twentieth"},
				{"21", "twenty-first"},
				{"22", "twenty-second"},
				{"23", "twenty-third"},
				{"24", "twenty-fourth"},
				{"25", "twenty-fifth"},
				{"26", "twenty-sixth"},
				{"27", "twenty-seventh"},
				{"28", "twenty-eighth"},
				{"29", "twenty-ninth"},
				{"30", "thirtieth"},
				{"31", "thirty-first"},
				{"32", "thirty-second"},
				{"33", "thirty-third"},
				{"34", "thirty-fourth"},
				{"35", "thirty-fifth"},
				{"36", "thirty-sixth"},
				{"37", "thirty-seventh"},
				{"38", "thirty-eighth"},
				{"39", "thirty-ninth"},
				{"40", "fortieth"}
			};
			
			#endregion ReplaceTuples
			
			for(int i = replaceTuples.Count - 1; i >= 0; i--)
			{
				editionText = editionText.Replace(replaceTuples[i].Item1, replaceTuples[i].Item2);
			}
			

			
			
			//DEBUG
			/*
			var debugOutput = new TextUnitCollection();
			var debugOutputText = new LiteralTextUnit("DEBUG", SwissAcademic.Drawing.FontStyle.Bold);
			debugOutput.Add(debugOutputText);
			handled = true;
			return debugOutput;		
			*/
			
			foreach(NumericFieldElement oldElement in editionFieldElements)
			{
				var newElements = new List<LiteralElement>();
				var hasPrefix = false;
				
				//add prefix if appropriate
				if (fieldContainsOnlyNumber)
				{
					if (editionNumber == 1 && oldElement.SingularPrefix != null && !string.IsNullOrEmpty(oldElement.SingularPrefix.Text))
					{
						var newPrefix = new LiteralElement(componentPart, oldElement.SingularPrefix.Text);
						newPrefix.FontStyle = oldElement.SingularPrefix.FontStyle;
						newElements.Add(newPrefix);
						hasPrefix = true;
					}
					else if (editionNumber > 1 && oldElement.PluralPrefix != null && !string.IsNullOrEmpty(oldElement.PluralPrefix.Text))
					{
						var newPrefix = new LiteralElement(componentPart, oldElement.PluralPrefix.Text);
						newPrefix.FontStyle = oldElement.SingularPrefix.FontStyle;
						newElements.Add(newPrefix);
						hasPrefix = true;
					}
				}
				
				
				//editionText
				if (autoCapitalizeFirstLetter)
				{
					if 
					(
						(componentPart.PunctuationBefore == null && !hasPrefix) ||											//we are - most likely - at beginning of output
						(componentPart.PunctuationBefore != null && componentPart.PunctuationBefore.Text.StartsWith(".") && !hasPrefix)
					)
					{			
						editionText = editionText.ToUpperFirstLetter();
					}
				}
				
				var newElement = new LiteralElement(componentPart, editionText);
				newElement.FontStyle = oldElement.FontStyle;
				newElements.Add(newElement);
				
				
				//add suffix if appropriate
				if (fieldContainsOnlyNumber)
				{
					if (editionNumber == 1 && oldElement.SingularSuffix != null && !string.IsNullOrEmpty(oldElement.SingularSuffix.Text))
					{
						var newSuffix = new LiteralElement(componentPart, oldElement.SingularSuffix.Text);
						newSuffix.FontStyle = oldElement.SingularSuffix.FontStyle;
						newElements.Add(newSuffix);
					}
					else if (editionNumber > 1 && oldElement.PluralPrefix != null && !string.IsNullOrEmpty(oldElement.PluralSuffix.Text))
					{
						var newSuffix = new LiteralElement(componentPart, oldElement.PluralSuffix.Text);
						newSuffix.FontStyle = oldElement.PluralSuffix.FontStyle;
						newElements.Add(newSuffix);
					}
				}
				
				componentPart.Elements.ReplaceItem(oldElement, newElements);
			}
			
			return null;
		}
		
		
		class TupleList<T1, T2> : List<Tuple<T1, T2>>
		{
		    public void Add(T1 item1, T2 item2)
		    {
		        Add( new Tuple<T1, T2>(item1, item2));
		    }
		}
		
	}
}]]></FilterCode>
  <IsFilterActivated>true</IsFilterActivated>
  <FilterName>Replace cardinal number (figure) in edition field by ordinal number (word)</FilterName>
  <FilterNotes />
  <Name>{0}</Name>
  <Notes />
  <PunctuationAfter type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="SameAsPrevious" />
    <Text />
  </PunctuationAfter>
  <PunctuationBefore type="LiteralElement">
    <ApplyCondition>Always</ApplyCondition>
    <FontStyle behavior="SameAsPrevious" />
    <Text>. </Text>
  </PunctuationBefore>
  <Scope>Reference</Scope>
  <ShowInList>true</ShowInList>
  <Elements>
    <Element type="NumericFieldElement">
      <ReferencePropertyId>Edition</ReferencePropertyId>
      <Required>false</Required>
      <DefaultNumericAbbreviation type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>false</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>true</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>th</Text>
      </DefaultNumericAbbreviation>
      <FontStyle behavior="Define" />
      <PluralPrefix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </PluralPrefix>
      <PluralSuffix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </PluralSuffix>
      <SingularPrefix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </SingularPrefix>
      <SingularSuffix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </SingularSuffix>
      <SpecialNumericAbbreviations type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="Define">
          <AllCaps>false</AllCaps>
          <Bold>false</Bold>
          <DoubleUnderline>false</DoubleUnderline>
          <Italic>false</Italic>
          <SmallCaps>false</SmallCaps>
          <StrikeThrough>false</StrikeThrough>
          <Subscript>false</Subscript>
          <Superscript>true</Superscript>
          <Underline>false</Underline>
        </FontStyle>
        <Text>1|st|2|nd|3|rd</Text>
      </SpecialNumericAbbreviations>
      <TextPrefix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </TextPrefix>
      <TextSuffix type="LiteralElement">
        <ApplyCondition>Always</ApplyCondition>
        <FontStyle behavior="SameAsPrevious" />
        <Text />
      </TextSuffix>
      <UseNumericAbbreviations>false</UseNumericAbbreviations>
    </Element>
  </Elements>
</ComponentPart>